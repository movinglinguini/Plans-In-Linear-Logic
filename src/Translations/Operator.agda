-- Translation of action descriptions from Actions You Can Handle into open 
-- lolli propositions in Adjoint Logic

open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)
open import Relation.Binary.Definitions using (DecidableEquality)
open import Data.Bool hiding (_‚âü_)
open import Relation.Nullary using (¬¨_; Dec; yes; no; does; contradiction; contraposition)
open import Relation.Nullary.Negation
open import Plans.Domain
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; cong)
open import Data.List.Relation.Binary.Sublist.Heterogeneous.Core using (_‚à∑ ≥_) renaming ([] to ‚àÖ)
open import Data.String hiding (_++_) renaming (_‚âü_ to _‚âü‚Çõ_)
open import Data.Nat using (‚Ñï; suc) renaming (_‚âü_ to _‚âü‚Çô_)

module Translations.Operator (domain : Domain) (Term : Set) where
  open import Data.List using (_++_; filter·µá; unzip; map)

  open Domain domain
  
  open import ADJ.Core PredMap Term public
  open import Utils.BigTensor PredMap Term using (‚®Ç_)

  private 
    isPos : PredMap ‚Üí Bool
    isPos ‚ü® + , p ‚ü© = true
    isPos ‚ü® - , p ‚ü© = false
    isPos ‚ü® polvar x , p ‚ü© = false

    isNeg : PredMap ‚Üí Bool
    isNeg p with isPos p
    ... | true = false
    ... | false = true

    filterPositive : List PredMap ‚Üí List PredMap
    filterPositive L = filter·µá isPos L
        
    filterNegative : List PredMap ‚Üí List PredMap
    filterNegative L = filter·µá isNeg L

    _‚Å∫ : ActionDescription ‚Üí List PredMap
    o ‚Å∫ = filterPositive (ActionDescription.preconditions o)

    _‚Åª : ActionDescription ‚Üí List PredMap
    o ‚Åª = filterNegative (ActionDescription.preconditions o)

    _‚Çä : ActionDescription ‚Üí List PredMap
    o ‚Çä = filterPositive (ActionDescription.effects o)

    _‚Çã : ActionDescription ‚Üí List PredMap
    o ‚Çã = filterNegative (ActionDescription.effects o)
  
    u‚â•l : Unrestricted ‚â• Linear
    u‚â•l = StructRule.W ‚à∑ ≥ (StructRule.C ‚à∑ ≥ ‚àÖ)

    postulate
      pols=pols : ‚àÄ { x y : ‚Ñï } ‚Üí (polvar x) ‚â° (polvar y) ‚Üí x ‚â° y

    _‚â°pol?_ : DecidableEquality Polarity
    pol‚ÇÅ ‚â°pol? pol‚ÇÇ with pol‚ÇÅ | pol‚ÇÇ
    ... | + | + = yes refl
    ... | + | - = no (Œª())
    ... | + | polvar x = no Œª ()
    ... | - | + = no (Œª ())
    ... | - | - = yes refl
    ... | - | polvar x = no Œª ()
    ... | polvar x | + = no Œª ()
    ... | polvar x | - = no Œª ()
    ... | polvar x | polvar y with x ‚âü‚Çô y
    ... | yes refl = yes refl
    ... | no x!=y = no Œª x‚ÇÅ ‚Üí x!=y (pols=pols x‚ÇÅ)

    postulate
      -- If pred maps are equal, then their constituents must be equal.
      pp=pp-1 : ‚àÄ { pol‚ÇÅ pol‚ÇÇ : Polarity } { p‚ÇÅ p‚ÇÇ : Predicate } ‚Üí ‚ü® pol‚ÇÅ , p‚ÇÅ ‚ü© ‚â° ‚ü® pol‚ÇÇ , p‚ÇÇ ‚ü© ‚Üí pol‚ÇÅ ‚â° pol‚ÇÇ
      pp=pp-2 : ‚àÄ { pol‚ÇÅ pol‚ÇÇ : Polarity } { p‚ÇÅ p‚ÇÇ : Predicate } ‚Üí ‚ü® pol‚ÇÅ , p‚ÇÅ ‚ü© ‚â° ‚ü® pol‚ÇÇ , p‚ÇÇ ‚ü© ‚Üí p‚ÇÅ ‚â° p‚ÇÇ

    _‚âü_ : DecidableEquality PredMap
    ‚ü® pol‚ÇÅ , p‚ÇÅ ‚ü© ‚âü ‚ü® pol‚ÇÇ , p‚ÇÇ ‚ü© with pol‚ÇÅ ‚â°pol? pol‚ÇÇ | p‚ÇÅ ‚âü‚Çö p‚ÇÇ
    ... | yes refl | yes refl = yes refl
    ... | yes refl | no p!=p = no Œª x ‚Üí contradiction (pp=pp-2 x) p!=p
    ... | no pol!=pol | yes refl = no Œª x ‚Üí contradiction (pp=pp-1 x) pol!=pol 
    ... | no pol!=pol | no p!=p = no Œª x ‚Üí contradiction (pp=pp-2 x) p!=p
        

    open import Data.List.Membership.DecPropositional _‚âü_ using (_‚àà?_)
  
  open import Utils.ListIntersection _‚âü_ public
  open import Utils.ListUnion _‚âü_ public

  cond : ActionDescription ‚Üí List PredMap
  cond record { preconditions = ps ; effects = es } = ps ‚à™ es

  translO : ActionDescription             -- Original Action Description
              ‚Üí List PredMap              -- Same action description to walk through
              ‚Üí Prop Linear               -- Left side of lolli, Initialized to ùüô
              ‚Üí Prop Linear               -- Right side of lolli, Initialized to ùüô
              ‚Üí ‚Ñï                         -- Variable counter, initialized to 0
              ‚Üí Prop Unrestricted
  translO AD Data.List.[] L R c = Up[ u‚â•l ] (L ‚ä∏ R)
  translO AD (‚ü® pol , p ‚ü© Data.List.‚à∑ conds) L R c with does (‚ü® pol , p ‚ü© ‚àà? ((AD ‚Å∫) ‚à© (AD ‚Çä)))
  ... | true = translO AD conds (` (‚ü® pol , p ‚ü©) ‚äó L) (` (‚ü® pol , p ‚ü©) ‚äó R) c
  ... | false with does (‚ü® pol , p ‚ü© ‚àà? ((AD ‚Åª) ‚à© (AD ‚Çã)))
  ... | true = translO AD conds ((` (‚ü® pol , p ‚ü©) ‚äó L)) ((` (‚ü® pol , p ‚ü©) ‚äó R)) c
  ... | false with does (‚ü® pol , p ‚ü© ‚àà? (AD ‚Å∫))
  ... | true = translO AD conds ((` (‚ü® pol , p ‚ü©) ‚äó L)) ((` (‚ü® pol , p ‚ü©) ‚äó R)) c
  ... | false with does (‚ü® pol , p ‚ü© ‚àà? (AD ‚Åª))
  ... | true = translO AD conds ((` (‚ü® pol , p ‚ü©) ‚äó L)) ((` (‚ü® pol , p ‚ü©) ‚äó R)) c 
  ... | false with does (‚ü® pol , p ‚ü© ‚àà? (AD ‚Çä))
  ... | true = translO AD conds (` (‚ü® polvar c , p ‚ü©) ‚äó L) (` (‚ü® pol , p ‚ü©) ‚äó R) (suc c)
  ... | false with does (‚ü® pol , p ‚ü© ‚àà? (AD ‚Çã))
  ... | true = translO AD conds (` (‚ü® polvar c , p ‚ü©) ‚äó L) (` (‚ü® pol , p ‚ü©) ‚äó R) (suc c)
  ... | false = ùüô ‚ä∏ ùüô -- An error must have occurred to get here

  -- translO : ActionDescription ‚Üí Prop Unrestricted
  -- translO o = Up[ u‚â•l ] (P‚ÇÅ ‚ä∏ P‚ÇÇ)
  --   where
  --     P‚ÇÅ : Prop Linear
  --     P‚ÇÇ : Prop Linear

  --     o‚Å∫ = filterPositive (ActionDescription.preconditions o)
  --     o‚Åª = filterNegative (ActionDescription.preconditions o)
  --     o‚Çä = filterPositive (ActionDescription.effects o)
  --     o‚Çã = filterNegative (ActionDescription.effects o)

  --     translP : PredMap ‚Üí ActionDescription ‚Üí (Prop Linear) √ó (Prop Linear)
  --     translP p o with does (p ‚àà? o‚Å∫) | does (p ‚àà? o‚Çä)
  --     ... | false | true = ‚ü® ‚àÄ[ "x" ] (` ‚ü® polvar "x" , proj‚ÇÇ p ‚ü©) , ` p ‚ü©
  --     ... | true | false = ‚ü® ` p , ` p ‚ü©
  --     ... | true | true =  ‚ü® ` p , ` p ‚ü©
  --     ... | false | false with does (p ‚àà? o‚Åª) | does (p ‚àà? o‚Çã)
  --     ... | false | false = ‚ü® ùüô , ùüô ‚ü©
  --     ... | false | true = ‚ü® ‚àÄ[ "x" ] (` ‚ü® polvar "x" , proj‚ÇÇ p ‚ü©) , ` p ‚ü©
  --     ... | true | false = ‚ü® ` p , ` p ‚ü©
  --     ... | true | true = ‚ü® ` p , ` p ‚ü©       
      
  --     Ps : (List (Prop Linear)) √ó (List (Prop Linear))
  --     Ps = unzip (Data.List.map (Œª p ‚Üí translP p o) (cond o))

  --     P‚ÇÅ = ‚®Ç proj‚ÇÅ Ps
  --     P‚ÇÇ = ‚®Ç proj‚ÇÇ Ps
  