open import Data.Nat
open import Data.Nat.Show
open import Data.Vec using (toList; Vec)
open import Data.List
open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)

module PrettyPrinter.PrettyPrinter (width : ‚Ñï) where
  open import Text.Pretty width public

  open import Translations.Core.Condition
  open import Translations.Core.State
  open import ADJ.Core
  
  {-
    Pretty print props
  -}
  prettyTerm : Term ‚Üí Doc
  prettyTerm (const x) = text x
  prettyTerm (var x) = char '#' <> (text (show x))
  
  prettyTCondition : TCondition ‚Üí Doc
  prettyTCondition record { name = name ; terms = args } 
    = text name <> parens (termDocs)
    where
      termDocs : Doc
      termDocs = foldr (Œª t acc ‚Üí (prettyTerm t) <> char ',' <+> acc) empty (toList args)


  prettyProposition : Proposition ‚Üí Doc
  prettyProposition v[ x , x‚ÇÅ ] = char 'v' <> parens (prettyTCondition x <> char ',' <+> prettyTerm x‚ÇÅ)

  prettyProp : Prop ‚Üí Doc
  prettyProp (` A) = prettyProposition A
  prettyProp (A ‚ä∏ B) = prettyProp A <+> char '‚ä∏' <+> prettyProp B
  prettyProp (A ‚äó B) = prettyProp A <+> char '‚äó' <+> prettyProp B
  prettyProp ùüô = char 'ùüô'
  prettyProp ‚ä§ = char '‚ä§'
  prettyProp (A ‚äï B) = prettyProp A <+> char '‚äï' <+> prettyProp B
  prettyProp (A & B) = prettyProp A <+> char '&' <+> prettyProp B
  prettyProp (‚Üë[ x ][ x‚ÇÅ ] A) = char '‚Üë' <> (prettyProp A)
  prettyProp (‚Üì[ x ][ x‚ÇÅ ] A) = char '‚Üì' <> (prettyProp A)
  prettyProp ‚àÄ[ A ] = char '‚àÄ' <> parens (prettyProp A)

  prettyPropxMode : (Prop √ó Mode) ‚Üí Doc
  prettyPropxMode ‚ü® A , m ‚ü© = prettyProp A

  prettyContext : ‚àÄ { x y } ‚Üí Context x y ‚Üí Doc
  prettyContext ‚ü® fst , snd ‚ü© = prettyContext-helper fst prettyTerm <> char ';' <+> prettyContext-helper snd prettyPropxMode
    where
      prettyContext-helper : ‚àÄ { A n } ‚Üí Vec A n ‚Üí (A ‚Üí Doc) ‚Üí Doc 
      prettyContext-helper Vec.[] f = empty
      prettyContext-helper (x Vec.‚à∑ V) f = f x <> char ',' <+> prettyContext-helper V f

  prettyProblem : ‚àÄ { x y } ‚Üí (Context x y) √ó Prop ‚Üí Doc
  prettyProblem ‚ü® fst , snd ‚ü© = prettyContext fst <+> char '‚ä¢' <+> prettyProp snd <+> char '‚äó' <+> char '‚ä§'