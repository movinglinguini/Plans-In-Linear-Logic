open import Data.List
open import Data.Vec hiding (foldr)
open import Data.Bool
open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)
open import Relation.Nullary.Decidable
open import Relation.Binary.PropositionalEquality
open import Data.Unit

module STRIPS.Core.Common where
  open import STRIPS.Core.Conditions

  {- Satisfaction of conditions -}
  sat·µá : List Condition ‚Üí (List Condition) √ó (List Condition) ‚Üí Bool
  sat·µá ‚ÑÇ ‚ü® ‚ÑÇ‚Å∫ , ‚ÑÇ‚Åª ‚ü© = (allIn ‚ÑÇ ‚ÑÇ‚Å∫) ‚àß (noneIn ‚ÑÇ ‚ÑÇ‚Åª)
    where
      allIn : List Condition ‚Üí List Condition ‚Üí Bool
      allIn ‚ÑÇ‚ÇÅ ‚ÑÇ‚ÇÇ = foldr (Œª x acc ‚Üí acc ‚àß (x ‚àà·∂ú·µá ‚ÑÇ‚ÇÅ)) true ‚ÑÇ‚ÇÇ

      noneIn : List Condition ‚Üí List Condition ‚Üí Bool
      noneIn ‚ÑÇ‚ÇÅ ‚ÑÇ‚ÇÇ = foldr (Œª x acc ‚Üí acc ‚àß (not (x ‚àà·∂ú·µá ‚ÑÇ‚ÇÅ))) true ‚ÑÇ‚ÇÇ 

  sat : List Condition ‚Üí (List Condition) √ó (List Condition) ‚Üí Set
  sat ‚ÑÇ ùîæ = T (sat·µá ‚ÑÇ ùîæ) 

  sat? : (S : List Condition) ‚Üí (G : (List Condition) √ó (List Condition)) ‚Üí Dec (sat S G)
  sat? S G with sat·µá S G
  ... | false = no Œª ()
  ... | true = yes tt

  private
    conds : List Condition
    conds = (record { name = "test-cond" ; args = [] }) ‚à∑ []

    goals1 : (List Condition) √ó (List Condition)
    goals1 = ‚ü® conds , [] ‚ü©

    goals2 : (List Condition) √ó (List Condition)
    goals2 = ‚ü® [] , conds ‚ü©

    _ : sat·µá conds goals1 ‚â° true
    _ = refl

    _ : sat·µá conds goals2 ‚â° false
    _ = refl
