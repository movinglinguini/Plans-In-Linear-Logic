open import Data.List
open import Data.Vec hiding (foldr)
open import Data.Bool
open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)
open import Relation.Nullary.Decidable
open import Relation.Binary.PropositionalEquality
open import Data.Unit
-- open import Data.List.Membership.DecPropositional
open import Data.List.Membership.Propositional

module STRIPS.Core.Common where
  open import STRIPS.Core.Conditions

  {- Satisfaction of conditions -}

  -- Boolean satisfaction: a condition satisfies a pair of lists of conditions if
  -- 1. all of the left part of the pair (the positive side) can be found in the condition
  -- 2. none of the right part of the pair (the negative side) can be found in the condition
  sat·µá : State ‚Üí (List (Condition 0)) √ó (List (Condition 0)) ‚Üí Bool
  sat·µá C ‚ü® G‚Å∫ , G‚Åª ‚ü© = (allIn C G‚Å∫) ‚àß (noneIn C G‚Åª)
    where
      allIn : List (Condition 0) ‚Üí List (Condition 0) ‚Üí Bool
      allIn ‚ÑÇ‚ÇÅ ‚ÑÇ‚ÇÇ = foldr (Œª x acc ‚Üí acc ‚àß (x ‚àà·∂ú·µá ‚ÑÇ‚ÇÅ)) true ‚ÑÇ‚ÇÇ

      noneIn : List (Condition 0) ‚Üí List (Condition 0) ‚Üí Bool
      noneIn ‚ÑÇ‚ÇÅ ‚ÑÇ‚ÇÇ = foldr (Œª x acc ‚Üí acc ‚àß (not (x ‚àà·∂ú·µá ‚ÑÇ‚ÇÅ))) true ‚ÑÇ‚ÇÇ 


  -- Propositional satisfaction: Similar to above, but we use propositional list membership.
  sat : State ‚Üí (List (Condition 0)) √ó (List (Condition 0)) ‚Üí Set
  sat ùïä ùîæ = T (sat·µá ùïä ùîæ)

  sat? : ( S : State) ‚Üí ( G : (List (Condition 0)) √ó (List (Condition 0)) ) ‚Üí Dec (sat S G)
  sat? S G with sat·µá S G
  ... | false = no (Œª ())
  ... | true = yes tt

  -- Testing out satisfaction
  private
    state : State
    state = (record { name = "cond-1" ; terms = [] }) ‚à∑ (record { name = "cond-2" ; terms = [] }) ‚à∑ []

    goal1 : (List (Condition 0)) √ó (List (Condition 0))
    goal1 = ‚ü® record { name = "cond-1" ; terms = [] } ‚à∑ [] , [] ‚ü©

    goal2 : (List (Condition 0)) √ó (List (Condition 0))
    goal2 = ‚ü® record { name = "cond-1" ; terms = [] } ‚à∑ [] , record { name = "cond-2" ; terms = [] } ‚à∑ [] ‚ü©

    _ : (sat·µá state goal1) ‚â° true
    _ = refl

    _ : (sat·µá state goal2) ‚â° false
    _ = refl


