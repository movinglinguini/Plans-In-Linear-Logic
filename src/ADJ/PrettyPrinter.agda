open import Data.Nat
open import Data.Nat.Show
open import Plans.Domain

module ADJ.PrettyPrinter (domain : Domain) (width : ‚Ñï) where

  open import Text.Pretty width
  open Domain domain  
  open import Syntax.Core domain
  open import ADJ.Core Proposition Term renaming (Context to Ctxt)

  module PrettyPrint (prettyPred : Predicate ‚Üí Doc) where
    prettyTerm : Term ‚Üí Doc 
    prettyTerm true = text "true" 
    prettyTerm false = text "false"
    prettyTerm (var x) = char '#' <> text (show x)

    prettyProposition : Proposition ‚Üí Doc
    prettyProposition v[ p , t ] = char 'v' <> (parens ((prettyPred p) <> char ',' <+> (prettyTerm t)))

    prettyProp : ‚àÄ { m : Mode } ‚Üí Prop m ‚Üí Doc
    prettyProp (` A) = prettyProposition A
    prettyProp (p ‚ä∏ p‚ÇÅ) = prettyProp p <+> (char '‚ä∏') <+> prettyProp p‚ÇÅ
    prettyProp (p ‚äó p‚ÇÅ) = prettyProp p <+> (char '‚äó') <+> prettyProp p‚ÇÅ
    prettyProp ùüô = char 'ùüô' 
    prettyProp ‚ä§ = char '‚ä§'
    prettyProp (p ‚äï p‚ÇÅ) = prettyProp p <+> (char '‚äï') <+> prettyProp p‚ÇÅ
    prettyProp (p & p‚ÇÅ) = prettyProp p <+> (char '&') <+> prettyProp p‚ÇÅ
    prettyProp (Up[ x ] p) = text "‚Üë" <> (parens (prettyProp p))
    prettyProp (Down[ x ] p) = text "‚Üì" <> (parens (prettyProp p))
    prettyProp (‚àÄ[ p ]) = char ('‚àÄ') <> (parens (prettyProp p))

    prettyCtxt : Ctxt ‚Üí Doc
    prettyCtxt ‚àÖ = char '‚àô'
    prettyCtxt (Œ® , x) = (prettyCtxt Œ®) <> char ',' <+> (prettyProp x)
