open import Relation.Binary.Definitions using (DecidableEquality)
open import Relation.Nullary using (¬¨_; Dec; yes; no; does; contradiction; contraposition)
open import Data.List renaming ([] to ‚àÖ; _‚à∑_ to _,_)
open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Nat using (zero)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; cong)

open import Plans.Domain
open import Plans.Domain.Core

module MovieDomain where
  --- Types for the domain
  data Type : Set where
    ‚ä§ : Type

  data Object : Set where
    x : Object

  data Predicate : Set where
    movie-rewound : Predicate
    counter-at-two-hours : Predicate
    counter-at-other-than-two-hours : Predicate
    counter-at-zero : Predicate
    have-chips : Predicate
    have-dip : Predicate
    have-pop : Predicate
    have-cheese : Predicate
    chips : Object ‚Üí Predicate
    dip : Object ‚Üí Predicate
    pop : Object ‚Üí Predicate
    crackers : Object ‚Üí Predicate

  data Action : Set where
    rewind-movie-2 : Action
    rewind-movie : Action
    reset-counter : Action
    get-chips : Object ‚Üí Action
    get-dip : Object ‚Üí Action
    get-pop : Object ‚Üí Action
    get-cheese : Object ‚Üí Action
    get-crackers : Object ‚Üí Action

  Œì : Action ‚Üí ActionDescription Type Action Predicate
  Œì rewind-movie-2 = record { 
    preconditions = (‚ü® + , counter-at-two-hours ‚ü©) , ‚àÖ ;
    effects = (‚ü® + , movie-rewound ‚ü©) , ‚àÖ 
    }
  Œì rewind-movie = {!   !}
  Œì reset-counter = {!   !}
  Œì (get-chips x‚ÇÅ) = {!   !}
  Œì (get-dip x‚ÇÅ) = {!   !}
  Œì (get-pop x‚ÇÅ) = {!   !}
  Œì (get-cheese x‚ÇÅ) = {!   !}
  Œì (get-crackers x‚ÇÅ) = {!   !}

  -- ########################################################
  -- Decidable Equality
  _‚âü‚Çö_ : DecidableEquality Predicate
  p‚ÇÅ ‚âü‚Çö p‚ÇÇ with p‚ÇÅ | p‚ÇÇ
  ... | movie-rewound | movie-rewound = yes refl
  ... | movie-rewound | counter-at-two-hours = no (Œª ())
  ... | movie-rewound | counter-at-other-than-two-hours = no (Œª ())
  ... | movie-rewound | counter-at-zero = no (Œª ())
  ... | movie-rewound | have-chips = no (Œª ())
  ... | movie-rewound | have-dip = no (Œª ())
  ... | movie-rewound | have-pop = no (Œª ())
  ... | movie-rewound | have-cheese = no (Œª ())
  ... | movie-rewound | chips x‚ÇÅ = no (Œª ())
  ... | movie-rewound | dip x‚ÇÅ = no (Œª ())
  ... | movie-rewound | pop x‚ÇÅ = no (Œª ())
  ... | movie-rewound | crackers x‚ÇÅ = no (Œª ())
  ... | counter-at-two-hours | movie-rewound = no (Œª ())
  ... | counter-at-two-hours | counter-at-two-hours = yes refl
  ... | counter-at-two-hours | counter-at-other-than-two-hours = no (Œª ())
  ... | counter-at-two-hours | counter-at-zero = no (Œª ())
  ... | counter-at-two-hours | have-chips = no (Œª ())
  ... | counter-at-two-hours | have-dip = no (Œª ())
  ... | counter-at-two-hours | have-pop = no (Œª ())
  ... | counter-at-two-hours | have-cheese = no (Œª ())
  ... | counter-at-two-hours | chips x‚ÇÅ = no (Œª ())
  ... | counter-at-two-hours | dip x‚ÇÅ = no (Œª ())
  ... | counter-at-two-hours | pop x‚ÇÅ = no (Œª ())
  ... | counter-at-two-hours | crackers x‚ÇÅ = no (Œª ())
  ... | counter-at-other-than-two-hours | movie-rewound = no (Œª ())
  ... | counter-at-other-than-two-hours | counter-at-two-hours = no (Œª ())
  ... | counter-at-other-than-two-hours | counter-at-other-than-two-hours = yes refl
  ... | counter-at-other-than-two-hours | counter-at-zero = no (Œª ())
  ... | counter-at-other-than-two-hours | have-chips = no (Œª ())
  ... | counter-at-other-than-two-hours | have-dip = no (Œª ())
  ... | counter-at-other-than-two-hours | have-pop = no (Œª ())
  ... | counter-at-other-than-two-hours | have-cheese = no (Œª ())
  ... | counter-at-other-than-two-hours | chips x‚ÇÅ = no (Œª ())
  ... | counter-at-other-than-two-hours | dip x‚ÇÅ = no (Œª ())
  ... | counter-at-other-than-two-hours | pop x‚ÇÅ = no (Œª ())
  ... | counter-at-other-than-two-hours | crackers x‚ÇÅ = no (Œª ())
  ... | counter-at-zero | movie-rewound = no (Œª ())
  ... | counter-at-zero | counter-at-two-hours = no (Œª ())
  ... | counter-at-zero | counter-at-other-than-two-hours = no (Œª ())
  ... | counter-at-zero | counter-at-zero = yes refl
  ... | counter-at-zero | have-chips = no (Œª ())
  ... | counter-at-zero | have-dip = no (Œª ())
  ... | counter-at-zero | have-pop = no (Œª ())
  ... | counter-at-zero | have-cheese = no (Œª ())
  ... | counter-at-zero | chips x‚ÇÅ = no (Œª ())
  ... | counter-at-zero | dip x‚ÇÅ = no (Œª ())
  ... | counter-at-zero | pop x‚ÇÅ = no (Œª ())
  ... | counter-at-zero | crackers x‚ÇÅ = no (Œª ())
  ... | have-chips | b = {!   !}
  ... | have-dip | b = {!   !}
  ... | have-pop | b = {!   !}
  ... | have-cheese | b = {!   !}
  ... | chips x‚ÇÅ | b = {!   !}
  ... | dip x‚ÇÅ | b = {!   !}
  ... | pop x‚ÇÅ | b = {!   !}
  ... | crackers x‚ÇÅ | b = {!   !}

  movieDomain : Domain
  movieDomain = record { 
    Type = Type ;
    Predicate = Predicate ;    
    Action = Action ;
    Œì = Œì ;
    _‚âü‚Çö_ = _‚âü‚Çö_ }

  -- Testing translation of an action definition
  open import Translations.Operator movieDomain Object

  AD = (Œì rewind-movie-2)
  condAD = cond AD

  translatedAction : Prop Unrestricted
  translatedAction = translO AD condAD ùüô ùüô zero  
  {-
    Output: Up[ u‚â•l ] ‚ü® polvar 0 , movie-rewound ‚ü© ‚äó ‚ü® + counter-at-two-hours ‚ü© ‚äó ùüô 
                    ‚ä∏ ‚ü® + , movie-rewound ‚ü© ‚äó ‚ü® + , counter-at-two-hours ‚ü© ‚äó ùüô 
  -}  